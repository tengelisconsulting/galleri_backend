worker_processes auto;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

env ALLOWED_ORIGIN;
env EZ_INPUT_HOST;
env EZ_INPUT_PORT;

env HTTP_ZMQ_HOST;
env HTTP_ZMQ_HTTP_PORT;
env PUB_PGST_HOST;
env PUB_PGST_PORT;
env SYS_PGST_HOST;
env SYS_PGST_PORT;
env OBJ_STORAGE_HOST;
env OBJ_STORAGE_BUCKET;
env REDIS_HOST;
env REDIS_PORT;

http {

    resolver local=on;

    limit_req_zone $binary_remote_addr zone=one_per_minute:10m rate=1r/m;
    limit_req_zone $binary_remote_addr zone=twelve_per_minute:10m rate=12r/m;

    server {

        listen ${GATEWAY_PORT};
        lua_code_cache ${LUA_CODE_CACHE};

        set $user_id "";

        location /auth {
            default_type application/json;
            include controllers/auth_controller.conf;
        }

        location ~ /anon-collection-link/(\S+)/(\S+) {
            include util/cors_ok.conf;
            set $obj_id $1;
            set $exp_ts $2;
            # access_by_lua_block {
            #     local auth = require "lua/auth"
            #     local session = require "lua/session"
            #     session.authenticate_req()
            #     auth.authorize_obj_access(
            #         ngx.var.user_id, ngx.var.obj_id, ngx.var.access_op
            #     )
            # }
            content_by_lua_block {
                local anon_collection = require "lua/anon_collection"
                return anon_collection.get_anon_collection_link(
                    ngx.var.obj_id, tonumber(ngx.var.exp_ts)
                )
            }
        }

        location /db {
            client_max_body_size ${OBJ_MAX_SIZE};
            client_body_buffer_size ${OBJ_BUFFER_SIZE};
            client_body_in_single_buffer on;
            include util/cors_ok.conf;
            default_type application/json;
            access_by_lua_block {
                local session = require "lua/session"
                session.authenticate_req()
            }
            rewrite ^/db/(.*)$ /$1 break;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_pass http://${PUB_PGST_HOST}:${PUB_PGST_PORT};
        }

        location ~ /public/db/(.*) {
            # This is for information that requires absolutely no
            # type of auth.  User names are here to ensure uniqueness
            # when creating a user.
            include util/cors_ok.conf;
            set $obj_name $1;
            default_type application/json;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            access_by_lua_block {
                local public_db = require "lua/public_db"
                public_db.ensure_public(ngx.var.obj_name)
            }
            rewrite ^/public/db/(.*)$ /$obj_name break;
            proxy_pass http://${PUB_PGST_HOST}:${PUB_PGST_PORT};
        }

        location ~ /obj-access/(\S+)/(\S+) {
            include util/cors_ok.conf;
            set $obj_id $1;
            set $access_op $2;
            access_by_lua_block {
                local auth = require "lua/auth"
                local session = require "lua/session"
                session.authenticate_req()
                auth.authorize_obj_access(
                    ngx.var.user_id, ngx.var.obj_id, ngx.var.access_op
                )
            }
            content_by_lua_block {
                local obj = require "lua/obj"
                obj.get_access_url(ngx.var.obj_id, ngx.var.access_op)
            }
        }

        location ~ /obj-access-anon/(\S+)/(\S+) {
            include util/cors_ok.conf;
            set $obj_id $1;
            set $access_op $2;
            access_by_lua_block {
                local auth = require "lua/auth"
                local args = ngx.req.get_uri_args()
                auth.authorize_anon_obj_access(
                    ngx.var.obj_id,
                    ngx.var.access_op,
                    tonumber(args.exp_ts),
                    args.ops,
                    ngx.var.arg_claims_hash
                )
            }
            content_by_lua_block {
                local obj = require "lua/obj"
                obj.get_access_url(ngx.var.obj_id, ngx.var.access_op)
            }
        }

        location /test {
            client_body_buffer_size 512m;
            client_body_in_single_buffer on;
            default_type application/json;
            content_by_lua_block {
                local test = require "lua/test"
                test.do_test()
            }
        }

    }
}
