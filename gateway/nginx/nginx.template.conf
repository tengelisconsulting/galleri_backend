worker_processes auto;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

env ALLOWED_ORIGIN;
env HTTP_ZMQ_HOST;
env HTTP_ZMQ_HTTP_PORT;
env PGST_HOST;
env PGST_PORT;
env OBJ_STORAGE_HOST;
env OBJ_STORAGE_BUCKET;

http {

    limit_req_zone $binary_remote_addr zone=one_per_minute:10m rate=1r/m;
    limit_req_zone $binary_remote_addr zone=twelve_per_minute:10m rate=12r/m;

    server {

        listen ${GATEWAY_PORT};
        lua_code_cache ${LUA_CODE_CACHE};

        location /auth {
            default_type application/json;
            include controllers/auth_controller.conf;
        }

        location /api {
            include util/cors_ok.conf;
            default_type application/json;
            access_by_lua_block {
                local auth = require "lua/auth"
                auth.authenticate_req()
            }
            rewrite ^/api/(.*)$ /$1 break;
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_pass http://${PGST_HOST}:${PGST_PORT};
        }

        location ~ /obj/(\S+) {
            resolver local=on;
            set $obj_id $1;
            set $target_url "";
            include util/cors_ok.conf;
            access_by_lua_block {
                local auth = require "lua/auth"
                local user_id = auth.authenticate_req()
                auth.authorize_owner(user_id, ngx.var.obj_id)
            }
            content_by_lua_block {
                local obj = require "lua/obj"
                obj.access_obj(ngx.var.obj_id)
            }
        }


        # location /test {
        #     content_by_lua_block {
        #         local test = require "lua/test"
        #         test.do_test()
        #     }
        # }

    }
}
